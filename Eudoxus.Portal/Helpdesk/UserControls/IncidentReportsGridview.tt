<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="DevExpress.Web.ASPxGridView.v9.2" #>
<#@ assembly name="DevExpress.Web.v9.2" #>
<#@ assembly name="DevExpress.Data.v9.2" #>
<#@ assembly name="DevExpress.Web.ASPxEditors.v9.2" #>
<#@ import namespace="DevExpress.Web.ASPxGridView"#>
<#@ assembly name="System.Web" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="EF.Utility.CS.ttinclude"#>
<#@ output extension=".cs" #>
<#	
	string ControlName = Path.GetFileNameWithoutExtension(Host.TemplateFile);
	string enumName = string.Format("en{0}Columns",ControlName);
	var gv = new ASPxGridView();	
	var ctrl = new StreamReader(Host.TemplateFile.Replace(".tt",".ascx")).ReadToEnd();
	
	var regex1 = new Regex("<dxwgv:ASPxGridView.+</dxwgv:ASPxGridView>", RegexOptions.Singleline);
	//XDocument xdox = XDocument.Parse(regex1.Match(ctrl).Value);
	
	var regex = new Regex("<dxwgv:GridView(.+)Column(.+)Name=\"(?<name>[^\"]+)\".+");
	var gridViewID = new Regex("dxwgv:ASPxGridView.*( ID)=\"(?<id>[^\"]+)\".+").Match(ctrl).Groups["id"].Value;
#>
<# 

List<string> columns = new List<string>();
foreach (Match match in regex.Matches(ctrl))
{
	string name = 	match.Groups["name"].Value.Replace(".","_");
	if(!columns.Contains(name))
		columns.Add(name);	

} #>
//Auto-Generated by djsolid 
using DevExpress.Web.ASPxGridView;
using System;
using System.Linq;
using System.ComponentModel;
using System.Collections.Generic;
namespace Eudoxus.Portal.Helpdesk.UserControls
{
	public enum <#= enumName #>
	{
<# 
	int bitWiseNumber = 1;	

	for (int i = 0; i < columns.Count; i++)
	{
		
		var c = columns[i];		
		if(i>0)
			bitWiseNumber = bitWiseNumber*2;
		if(c == columns.Last())
			WriteLine(string.Format("\t\t{0} = {1}",c,bitWiseNumber));
		else
			WriteLine(string.Format("\t\t{0} = {1},",c,bitWiseNumber));
		
	}
#>
	}
	
	public partial class <#= ControlName #>
	{
		
		[Browsable(false)]
        public List<<#= enumName #>> HiddenColumns { get; set; }
		
		[Browsable(false)]
        public List<<#= enumName #>> DefaultColumns { get; set; }
		
		protected bool IsHiddenColumn(GridViewColumn column)
        {
            if (HiddenColumns == null || HiddenColumns.Count == 0)
                return false;

            string columnName = column.Name.Replace('.', '_');
            <#= enumName #> columnEnum = (<#= enumName #>)Enum.Parse(typeof(<#= enumName #>), columnName);
            return HiddenColumns.Exists(x => x == columnEnum);
        }
		
		protected bool IsDefaultColumn(GridViewColumn column)
        {
            if (DefaultColumns == null || DefaultColumns.Count == 0)
                return false;

            string columnName = column.Name.Replace('.', '_');
            if (columnName.StartsWith("CUSTOM_"))
                return true;
            <#= enumName #> columnEnum = (<#= enumName #>)Enum.Parse(typeof(<#= enumName #>), columnName);
            return DefaultColumns.Exists(x => x == columnEnum);
        }
		
		public void HideHiddenColumns()
        {
            if (HiddenColumns != null && HiddenColumns.Count > 0)
            {
                foreach (<#= enumName #> item in HiddenColumns)
                {
                    var columnName = item.ToString().Replace('_', '.');
                    <#= gridViewID #>.Columns[columnName].Visible = <#= gridViewID #>.Columns[columnName].ShowInCustomizationForm = false;
                }
            }
        }
		
		protected void SetUItoDefault()
        {
            var listColumns = <#= gridViewID #>.Columns
                .OfType<GridViewColumn>();

            foreach (var column in listColumns.Where(c => IsDefaultColumn(c)).ToList())
            {
                column.Visible = true;
            }
            foreach (var column in listColumns.Where(c => !IsDefaultColumn(c)).ToList())
            {
                column.Visible = false;
            }
        }
	}
}